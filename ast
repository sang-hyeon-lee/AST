#include <stdio.h>
#include <string.h>
#include <json-c/json.h>

int funcCount = 0;
int ifCount = 0;

const char *get_return_names(json_object *node)
{
    if (1){
        if (json_object_object_get(node, "type")){
            json_object *type = json_object_object_get(node, "type");
            if (json_object_object_get(type, "type")){
                json_object *type2 = json_object_object_get(type, "type");
                if (json_object_object_get(type2, "type")){
                    json_object *type3 = json_object_object_get(type2, "type");
                    if (json_object_object_get(type3, "type")){
                        json_object *type4 = json_object_object_get(type3, "type");
                        if (json_object_object_get(type4, "type")){
                            json_object *type5 = json_object_object_get(type4, "type");
                            if (json_object_object_get(type5, "type")){
                                json_object *type6 = json_object_object_get(type5, "type");
                                json_object *names = json_object_object_get(type6, "names");
                                return json_object_get_string(json_object_array_get_idx(names, 0));
                            }
                            json_object *names = json_object_object_get(type5, "names");
                            return json_object_get_string(json_object_array_get_idx(names, 0));
                        }
                        json_object *names = json_object_object_get(type4, "names");
                        return json_object_get_string(json_object_array_get_idx(names, 0));
                    }
                    json_object *names = json_object_object_get(type3, "names");
                    return json_object_get_string(json_object_array_get_idx(names, 0));
                }
                json_object *names = json_object_object_get(type2, "names");
                return json_object_get_string(json_object_array_get_idx(names, 0));
            }
            json_object *names = json_object_object_get(type, "names");
            return json_object_get_string(json_object_array_get_idx(names, 0));
        }
        return "NULL";
    }
}

long file_size(FILE *file) {
    long size;
    fseek(file, 0, SEEK_END);
    size = ftell(file);
    rewind(file);
    return size;
}

char* read_file_to_string(const char *filename) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        fprintf(stderr, "Failed to open file: %s\n", filename);
        return NULL;
    }

    long size = file_size(file);


    char *buffer = (char *)malloc(size + 1);
    if (buffer == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        fclose(file);
        return NULL;
    }


    fread(buffer, size, 1, file);
    buffer[size] = '\0'; 

    fclose(file);

    return buffer;
}

int find_all_occurrences(const char *str, const char *substr) {
    int substr_len = strlen(substr);
    const char *ptr = str;
    int pos = 0;
    while ((ptr = strstr(ptr, substr)) != NULL) {
        ifCount++;
        ptr += substr_len; 
        pos = ptr - str;
    }
    if (pos == 0)
        printf("'%s' not found\n", substr);
    return ifCount;
}


void get_parameter(json_object *node)
{
    if (1) {
        json_object *decl = json_object_object_get(node, "decl");
        json_object *type = json_object_object_get(decl, "type");
        if (json_object_object_get(type, "args")){
            json_object *args = json_object_object_get(type, "args");
            json_object *params = json_object_object_get(args, "params");
            int array_length = json_object_array_length(params);
            for(int i = 0; i < array_length; i++){
                json_object *node = json_object_array_get_idx(params, i);
                json_object *name = json_object_object_get(node, "name");
                printf("parameter Name: %s, parameter Type: %s\n", json_object_get_string(name), get_return_names(node));
            }
        }
        else {
            printf("parameter: %s\n", "NULL");
        }
    }
}

const char *segmentation_json(json_object *node)
{
    // printf("%s\n", json_object_get_string(nodetype));
    if (1){
        funcCount++;
        json_object *decl = json_object_object_get(node, "decl");
        json_object *funcName = json_object_object_get(decl, "name");
        return json_object_get_string(funcName);

        // strcpy(funcList[i], json_object_get_string(funcName));
        // printf("%s\n", funcList[i]);
        return "NULL";
    } else {
        return "NULL";
    }
}
void parse_json(const char *target)
{
    json_object *file = json_object_from_file(target);
    if (!file){
        printf("Error occurred while loading json file!!!\n\n");
        return;
    }
    char *json_string = read_file_to_string(target);
    json_object *ext = json_object_object_get(file, "ext");
    json_object *jobj = json_tokener_parse(json_object_get_string(file));
    if (ext && json_object_is_type(ext, json_type_array)){
        int array_length = json_object_array_length(ext);
        printf("-----------------------\n\n");
        for(int i = 0; i < array_length; i++){
            json_object *node = json_object_array_get_idx(ext, i);
            json_object *decl = json_object_object_get(node, "decl");
            json_object *nodetype = json_object_object_get(node, "_nodetype");
            // printf("%s\n", json_object_get_string(nodetype));
            if (!strcmp(json_object_get_string(nodetype), "FuncDef")){
                printf("funcName: %s\n", segmentation_json(node));
                printf("return Type: %s\n", get_return_names(decl));
                get_parameter(node);

                printf("\n-----------------------\n\n");
            }
        }
        printf("Total If Count: %d\n", find_all_occurrences(json_string, "If"));
    } else {
        printf("Invalid JSON array!\n");
    }
    printf("Total func Count: %d\n", funcCount);
    json_object_put(ext);
    return;
}

int main(int argc, char **argv) {
    if (argc != 2) {
        printf("Usage: %s <please upload json file>\n", argv[0]);
        return -1;
    } else {
        parse_json(argv[1]);
        return 0;
    }
}
